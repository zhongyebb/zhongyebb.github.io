<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>解决用leancloud给fluid增加访问量和评论功能时无法加载和显示的问题</title>
    <link href="/2024/09/29/%E5%A2%9E%E5%8A%A0%E8%AE%BF%E9%97%AE%E9%87%8F%E5%8A%9F%E8%83%BD-md/"/>
    <url>/2024/09/29/%E5%A2%9E%E5%8A%A0%E8%AE%BF%E9%97%AE%E9%87%8F%E5%8A%9F%E8%83%BD-md/</url>
    
    <content type="html"><![CDATA[<p>2022年LeanCloud 国际版不再为来自中国大陆的 IP 提供服务，基于 LeanCloud 的站点统计因此失效，使用LeanCloud统计时无显示，但使用梯子后是正常显示的，因此改用LeanCloud国内版即可。</p><p>剩下的操作可以直接参考<a href="http://minghuijia.cn/2022/03/14/Hexo-fluid%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E7%BB%9F%E8%AE%A1%E5%8D%9A%E5%AE%A2%E9%98%85%E8%AF%BB%E9%87%8F/">链接</a></p><p>补充：修改_config.fluid.yml</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text"># REST API 服务器地址，国际版不填<br># Only the Chinese mainland users need to set<br>server_url: //将LeanCloud中的REST API复制过来<br></code></pre></td></tr></tbody></table></figure><p>So easy！但是花了我一个晚上加一个下午<span class="github-emoji"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>更新：发现评论功能不挂梯子还是用不了，好像需要买个域名DNS解析到国内服务器上，好麻烦，先选择性放弃一下。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo-admonition插件安装无显示且显示异常问题</title>
    <link href="/2024/09/28/hexo-admonition%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98/"/>
    <url>/2024/09/28/hexo-admonition%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>耗时两个小时解决，主要花在了找资料和理解上<span class="github-emoji"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><br>大多数人用的是Mkdocs框架，包括用vscode预览时也是，但本人用的是Hexo框架，这就导致了一开始找到的资料都不太有用。且对于CSS文件了解不多，最后是在官方手册找到的解决方法。</p><h2 id="镜像源失效"><a href="#镜像源失效" class="headerlink" title="镜像源失效"></a>镜像源失效</h2><p><code>npm ERR! code ECONNRESET //等一长串error</code></p><p>要解决该问题，需要重置镜像源</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">npm config set proxy null 重置代理<br>npm config set registry https://registry.npmmirror.com 更换源(仍然报错expired的话继续换源，直接搜索hexo镜像源即可)<br></code></pre></td></tr></tbody></table></figure><h2 id="修改CSS文件"><a href="#修改CSS文件" class="headerlink" title="修改CSS文件"></a>修改CSS文件</h2><p>安装完插件之后发现并没有按照预期显示，且attention等标签用不了。上传到GitHub后显示如下图<br><img src="https://raw.githubusercontent.com/zhongyebb/picture-gallery/main/blogs/pictures/20240928172150.png" alt="20240928172150" title="attention标签显示异常"></p><p>解决该问题，首先在public/CSS文件夹中创建一个自定义CSS文件my.css，并将下列代码复制进去</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs text">.admonition {<br>  margin: 1.5625em 0;<br>  padding: .6rem;<br>  overflow: hidden;<br>  font-size: .64rem;<br>  page-break-inside: avoid;<br>  border-left: .3rem solid #42b983;<br>  border-radius: .3rem;<br>  box-shadow: 0 0.1rem 0.4rem rgba(0,0,0,.05), 0 0 0.05rem rgba(0,0,0,.1);<br>  background-color: #fafafa;<br>}<br><br>p.admonition-title {<br>  position: relative;<br>  margin: -.6rem -.6rem .8em -.6rem !important;<br>  padding: .4rem .6rem .4rem 2.5rem;<br>  font-weight: 700;<br>  background-color:rgba(66, 185, 131, .1);<br>}<br><br>.admonition-title::before {<br>  position: absolute;<br>  top: .9rem;<br>  left: 1rem;<br>  width: 12px;<br>  height: 12px;<br>  background-color: #42b983;<br>  border-radius: 50%;<br>  content: ' ';<br>}<br><br>.info&gt;.admonition-title, .todo&gt;.admonition-title {<br>  background-color: rgba(0,184,212,.1);<br>}<br><br>.warning&gt;.admonition-title, .attention&gt;.admonition-title, .caution&gt;.admonition-title {<br>  background-color: rgba(255,145,0,.1);<br>}<br><br>.failure&gt;.admonition-title, .missing&gt;.admonition-title, .fail&gt;.admonition-title, .error&gt;.admonition-title {<br>  background-color: rgba(255,82,82,.1);<br>}<br><br>.admonition.info, .admonition.todo {<br>  border-color: #00b8d4;<br>}<br><br>.admonition.warning, .admonition.attention, .admonition.caution {<br>  border-color: #ff9100;<br>}<br><br>.admonition.failure, .admonition.missing, .admonition.fail, .admonition.error {<br>  border-color: #ff5252;<br>}<br><br>.info&gt;.admonition-title::before, .todo&gt;.admonition-title::before {<br>  background-color: #00b8d4;<br>  border-radius: 50%;<br>}<br><br>.warning&gt;.admonition-title::before, .attention&gt;.admonition-title::before, .caution&gt;.admonition-title::before {<br>  background-color: #ff9100;<br>  border-radius: 50%;<br>}<br><br>.failure&gt;.admonition-title::before,.missing&gt;.admonition-title::before,.fail&gt;.admonition-title::before,.error&gt;.admonition-title::before{<br>  background-color: #ff5252;;<br>  border-radius: 50%;<br>}<br><br>.admonition&gt;:last-child {<br>  margin-bottom: 0 !important;<br>}<br></code></pre></td></tr></tbody></table></figure><p>然后修改_config.fluid.yml文件<br><code>custom_css: /css/my.css</code></p><p>最后重新上传即可<br>有用的话请点个<span class="github-emoji"><span>❤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>，非常感谢！</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://blog.csdn.net/qq_16785561/article/details/140782167">安装报错</a><br><a href="https://github.com/lxl80/hexo-admonition?tab=readme-ov-file">hexo-admonition插件</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>学习历程</title>
    <link href="/2024/09/27/%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B/"/>
    <url>/2024/09/27/%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="markdown"><a href="#markdown" class="headerlink" title="markdown"></a>markdown</h3><ul><li>timeline：9.27</li><li>学习资料<ul><li><a href="www.markdowntutorial.com">网站</a> (可以边学边做学得很快，但是只有基础语法)</li><li><a href="www.markdown.cn/docs/tutorial-basics/basic-syntax">官网手册</a>(有代码、列表等拓展语法)</li></ul></li></ul><h3 id="GitHub个人主页搭建"><a href="#GitHub个人主页搭建" class="headerlink" title="GitHub个人主页搭建"></a>GitHub个人主页搭建</h3><ul><li>timeline: 9.27</li><li>学习资料<ul><li><a href="https://www.bilibili.com/read/cv32931591/?jump_opus=1">Hexo+guihub=个人网站</a></li><li><a href="https://fluid-dev.github.io/hexo-fluid-docs/guide/#%E5%BC%BA%E5%88%B6%E5%85%A8%E5%B1%80-https">Hexo fluid官方用户手册</a>（墙裂安利，可以找到很多有用的功能）</li><li><a href="https://zhongyebb.github.io/2024/05/02/hello-world/">Hexo常用指令</a></li><li><a href="https://cloud.tencent.com/developer/article/1952241">Hexo插件</a></li><li><a href="https://cyberzone.cloud/2023/11/11/Fluid%E4%BD%BF%E7%94%A8Waline%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/#2-2-Vercel-%E9%83%A8%E7%BD%B2-%E6%9C%8D%E5%8A%A1%E7%AB%AF">增加评论功能waline</a>(存在一些问题)</li><li><a href="https://blog.csdn.net/qq_44314954/article/details/122951033">github图床搭建</a></li></ul></li><li>问题 <span class="github-emoji"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><ul><li><a href="https://zhongyebb.github.io/2024/09/28/hexo-admonition%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98/">hexo admonition插件安装问题</a>（耗时两个小时解决）</li><li>[增加访问量功能及出现的问题]</li></ul></li></ul><h2 id="计算机基础知识"><a href="#计算机基础知识" class="headerlink" title="计算机基础知识"></a>计算机基础知识</h2><h3 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h3><ul><li>timeline：</li></ul><table><thead><tr><th>时间</th><th>内容</th><th>备注</th></tr></thead><tbody><tr><td>9.28-10.02</td><td>绪论</td><td>很简单但是这段时间摸鱼了<span class="github-emoji"><span>😠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f620.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td></tr><tr><td>10.02-</td><td>线性表</td><td>基本上都是学过的，库库过，拉到最后直接看代码</td></tr></tbody></table><ul><li>学习资料<ul><li><a href="https://www.bilibili.com/video/BV1nJ411V7bd/">王卓网课</a></li></ul></li></ul><h3 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h3><h3 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h3><h3 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h3><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构与算法笔记</title>
    <link href="/2024/09/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    <url>/2024/09/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><p><strong>数据结构与算法</strong>：是一门研究非数值计算的程序设计中计算机的操作对象以及他们之间的关系和操作的学科。</p><h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><p>是输入计算机且被计算机处理的各种符号的集合，是信息的载体。</p><ul><li><strong>数据元素（元素）</strong>：是数据的基本单位，在计算机程序中通常作为一个整体进行考虑和处理。也可称为记录、结点或顶点。</li><li><strong>数据项</strong>：构成数据元素的不可分割的最小单位。</li><li><strong>数据对象</strong>：性质相同的数据元素的集合，是数据的一个子集。</li></ul><div class="admonition note"><p class="admonition-title">note</p><p>数据&gt;数据对象&gt;数据元素&gt;数据项</p></div><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>数据元素相互之间的关系称为结构，是指相互之间存在一中或多种特定关系的数据元素集合。</p><ul><li><p><strong>逻辑结构</strong>：数据元素之间的逻辑关系，即从具体问题中抽象出来的数学模型。</p><ul><li><strong>线性结构</strong>：有且仅有一个开始和一个终端结点。<em>线性表、栈、队列、串等</em></li><li><strong>非线性结构</strong>：一个结点可能有多个直接前趋和直接后继。<em>树、图、网等</em></li></ul></li><li><p><strong>物理结构（存储结构）</strong>：数据元素及其在计算机内存中的表示（又称为映像）。</p><ul><li><strong>顺序存储结构</strong>：用一组连续的存储单元依次存储数据元素，元素的存储位置表示逻辑关系。<em>如数组</em></li><li><strong>链接存储结构</strong>：用一组任意的存储单元存储数据元素，在存储数据的同时存储下一个数据的地址。<em>如指针</em></li><li><strong>索引存储结构</strong>：在存储节点信息的同时，还建立附加的索引表。<em>如通讯录</em></li><li><strong>散列存储结构</strong>：根据节点的关键字直接计算出该节点的存储地址。</li></ul></li><li><p><strong>数据的运算和实现</strong>：对数据元素可以施加的操作以及这些操作在相应的存储结构上的实现。</p></li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>一组性质相同的值的集合，以及定义于这个值集合上的一组操作的总称。<em>如int、char、数组等</em></p><ul><li><p><strong>作用</strong>：约束变量的取值范围和操作。</p></li><li><p><strong>抽象数据类型（ADT）</strong>：从问题抽象出的一个数学模型以及定义的操作（抽取共同点），用三元组（D、S、P）表示。<em>如c++中的类</em></p><ul><li>D：数据对象</li><li>S：数据关系</li><li>P：基本操作</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/zhongyebb/picture-gallery/main/blogs/pictures/20240928110706.png" alt="20240928110706" title="基本概念总结图"></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>对特定问题求解方法和步骤的描述。是指令的有限序列，其中每个指令表示一个或多个操作。</p><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ul><li><strong>有穷性</strong>：执行步骤和时间是有限的。</li><li><strong>确定性</strong>：每一条指令有确切含义，没有二义性。只有唯一的一条执行路径，即对于相同的输入只能得到相同的输出。</li><li><strong>可行性</strong>：可执行的，可以通过已经实现的基本操作执行有限次来实现。</li><li><strong>输入</strong>：有零个或多个输入。</li><li><strong>输出</strong>：有一个或多个输出。</li></ul><div class="admonition attention"><p class="admonition-title">attention</p><p>输入可以没有但输出至少一个</p></div><h4 id="设计要求"><a href="#设计要求" class="headerlink" title="设计要求"></a>设计要求</h4><ul><li><strong>正确性（Correctness）</strong>：无语法错误，任意输入的结果正确，即对于某些典型的、苛刻且带有刁难性的输入能得到正确结果。</li><li><strong>可读性（Readability）</strong>：便于理解和交流，方便调试。</li><li><strong>健壮性（Robustness）</strong>：有些地方会翻译成鲁棒性。指当输入非法数据时，算法会做出恰当反应并合理处理。</li><li><strong>高效性（Efficiency）</strong>：时间少，存储低。<ul><li>时间效率：算法所耗费的时间，有两种度量方法<ul><li>事后分析：算法实现后，实际运行来进行测量。需要花费较多时间和精力，且与软硬件性能有关。</li><li>事前分析：直接对消耗资源进行估算。</li></ul></li><li>空间效率：算法执行过程中耗费的存储空间<br>一个好的算法首先要具备正确性，然后是健壮性，可读性，在几个方面都满足的情况下，主要考虑算法的效率。</li></ul></li></ul><h4 id="时间效率的计算"><a href="#时间效率的计算" class="headerlink" title="时间效率的计算"></a>时间效率的计算</h4><ul><li><code>算法运行时间=一个简单操作所需要的时间×简单操作的次数</code></li><li>语句频度：每条语句的执行次数<br>则<code>算法运行时间=Σ(语句频度×该语句执行一次所需的时间)</code>。假设执行每条语句所需的时间均为单位时间，则可转化为讨论该算法中所有语句的执行次数，即<strong>频度之和</strong></li></ul><blockquote><p><strong>例1：两个n×n的矩阵相乘</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-comment">//执行n+1次，最后一次判断并推出</span><br>  <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=n;j++){ <span class="hljs-comment">//n(n+1)</span><br>    c[i][j]=<span class="hljs-number">0</span>; <span class="hljs-comment">//n*n</span><br>    <span class="hljs-keyword">for</span>(k=<span class="hljs-number">0</span>;k&lt;n;k++) <span class="hljs-comment">//n*n*(n+1)</span><br>      c[i][j]=c[i][j]+a[i][k]*b[k][j]; <span class="hljs-comment">//n*n*n</span><br>  }<br><span class="hljs-comment">//则时间消耗T(n)=2n^3^+3n^2^+2n+1</span><br></code></pre></td></tr></tbody></table></figure></blockquote><div class="admonition note"><p class="admonition-title">note</p><ul><li>一般直接用<strong>最大数量级</strong>进行比较，即算法的渐进时间复杂度，简称<strong>时间复杂度</strong>，记为<strong>O(f(n))</strong>。</li><li>在计算数量级的时候，不需要考虑所有语句，只考虑贡献最大的语句即可，即执行次数最多的语句，称该语句为<strong>基本操作</strong>。</li><li><em>在例1中时间复杂度为n^3^，即T(n)=O(n^3^)</em>。</li></ul></div><p><img src="https://raw.githubusercontent.com/zhongyebb/picture-gallery/main/blogs/pictures/20241002160101.png" alt="20241002160101" title="例2 时间复杂度的计算"></p><h5 id="时间复杂度与输入数据集有关时"><a href="#时间复杂度与输入数据集有关时" class="headerlink" title="时间复杂度与输入数据集有关时"></a>时间复杂度与输入数据集有关时</h5><ul><li><strong>最坏时间复杂度</strong>：指在最坏情况下的时间复杂度</li><li><strong>最好时间复杂度</strong>：指在最好情况下的时间复杂度</li><li><strong>平均时间复杂度</strong>：所有可能输入实例等概率出现时，算法的期望运行时间</li></ul><div class="admonition note"><p class="admonition-title">note</p><p>一般考虑<strong>最坏时间复杂度</strong>。</p></div><h5 id="复杂算法时间复杂度的计算"><a href="#复杂算法时间复杂度的计算" class="headerlink" title="复杂算法时间复杂度的计算"></a>复杂算法时间复杂度的计算</h5><ul><li>加法规则：若可以将算法分解为多个函数相加，则取其中最大的一个数量级</li><li>乘法规则：若可以将算法分解为多个函数相乘，则将所有函数的时间复杂度相乘。</li></ul><h5 id="时间效率的比较"><a href="#时间效率的比较" class="headerlink" title="时间效率的比较"></a>时间效率的比较</h5><p>复杂度由低到高</p><table><thead><tr><th>常数阶</th><th>对数阶</th><th>线性阶</th><th>线性对数阶</th><th>平方阶</th><th>立方阶</th><th>指数阶</th><th>阶乘阶</th></tr></thead><tbody><tr><td>O(1)</td><td>O(logn)</td><td>O(n)</td><td>O(nlogn)</td><td>O(n^2^)</td><td>O(n^3^)</td><td>O(2^n^)</td><td>O(n!)</td></tr></tbody></table><h4 id="空间效率的计算"><a href="#空间效率的计算" class="headerlink" title="空间效率的计算"></a>空间效率的计算</h4><ul><li>渐进空间复杂度：算法所需存储空间的度量，记为S(n)。</li><li>算法要占据的空间包括：输入输出、指令、常数、变量等，以及要使用的辅助空间。</li></ul><blockquote><p><strong>例3：将一组数组a中的n个数逆序存放到原数组中</strong><br>算法1 需要t作为辅助空间 S(n)=O(1) <em>常数阶称为原理工作</em></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">&gt;<span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n/<span class="hljs-number">2</span>;i++){<br> t=a[i];<br> a[i]=a[n-i<span class="hljs-number">-1</span>];<br> a[n-i<span class="hljs-number">-1</span>]=t;<br>&gt;}<br></code></pre></td></tr></tbody></table></figure><p>算法2 需要b[n]作为辅助空间 S(n)=O(n)</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">&gt;<span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<br> b[i]=a[n-i<span class="hljs-number">-1</span>];<br>&gt;<span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<br> a[i]=b[i];<br></code></pre></td></tr></tbody></table></figure></blockquote><h2 id="逻辑结构的种类"><a href="#逻辑结构的种类" class="headerlink" title="逻辑结构的种类"></a>逻辑结构的种类</h2><h3 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h3><h4 id="定义及特性"><a href="#定义及特性" class="headerlink" title="定义及特性"></a>定义及特性</h4><ul><li>具有<strong>相同特性</strong>的数据元素（结点）的一个<strong>有限</strong>序列，元素之间的关系是线性关系。</li><li><strong>起始结点</strong>：线性表中的第一个数据元素，也称首元。</li><li><strong>终端节点</strong>：线性表中的最后一个数据元素。</li><li>对于某个内部节点a<del>i</del>，称a<del>i-1</del>为<strong>直接前趋</strong>，a<del>i+1</del>为<strong>直接后继</strong>。</li><li>下标是元素的序号，用于表示元素在表中的位置。</li><li><strong>表长</strong>：表的长度，即元素总个数，一般用n表示。<em>n=0时称为空表</em></li></ul><div class="admonition attention"><p class="admonition-title">attention</p><p>线性表的逻辑特征为线性关系，具体体现为每一个元素都<strong>最多</strong>只有一个直接前趋和直接后继。首元无前趋，末尾无后继。</p></div><blockquote><p><strong>例1：稀疏多项式的存储</strong><br>可以只储存有系数的多项式而不用全部储存，只需将系数和项的次数同时储存即可。<br>但用顺序存储结构，在进行多项式加法时需要遍历计算再存储，且用于储存新生成多项式的数组大小不确定。<em>此时可以考虑采用链式存储结构</em>。</p></blockquote><h4 id="类型定义"><a href="#类型定义" class="headerlink" title="类型定义"></a>类型定义</h4><ul><li>基本操作</li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c">InitList(&amp;L) <br>  <span class="hljs-comment">//构造一个空的线性表（构造函数）</span><br>DestroyList(&amp;L) <br>  <span class="hljs-comment">//判断线性表是否存在</span><br>  <span class="hljs-comment">//若存在则销毁线性表</span><br>ClearList(&amp;L) <br>  <span class="hljs-comment">//判断线性表是否存在</span><br>  <span class="hljs-comment">//若存在则将线性表置为空表</span><br>ListEmpty(L) <br>  <span class="hljs-comment">//判断线性表是否存在</span><br>  <span class="hljs-comment">//若存在则将判断线性表是否为空，是则返回TRUE，否则返回FALSE</span><br>ListLength(L) <br>  <span class="hljs-comment">//判断线性表是否存在</span><br>  <span class="hljs-comment">//若存在则返回线性表中的元素个数</span><br>GetElem(L,i,&amp;e) <br>  <span class="hljs-comment">//线性表存在，且1&lt;=i&lt;=ListLength(L)</span><br>  <span class="hljs-comment">//用e返回线性表L中第i个数据元素的值</span><br>LocateElem(L,e,compare())<br>  <span class="hljs-comment">//线性表存在，compare()是数据元素的判断函数(大于，小于，等于···)</span><br>  <span class="hljs-comment">//返回L中第1个与e满足compare()的数据元素的位序，若不存在这样的元素则返回0</span><br>PriorElem(L,cur_e,&amp;pre_e)<br>  <span class="hljs-comment">//线性表存在</span><br>  <span class="hljs-comment">//若cur_e是L的数据元素，且不是第一个，则用pre_e返回它的前趋；否则pre_e无意义</span><br>NextElem(L,cur_e,&amp;next_e)<br>  <span class="hljs-comment">//线性表存在</span><br>  <span class="hljs-comment">//若cur_e是L的数据元素，且不是最后一个，则用pre_e返回它的后继；否则pre_e无意义</span><br>ListInsert(&amp;L,i,e)<br>  <span class="hljs-comment">//线性表存在，且1&lt;=i&lt;=ListLength(L)+1</span><br>  <span class="hljs-comment">//在L的第i个位置之前插入新的数据元素e，L的长度加1</span><br>ListDelete(&amp;L,i,&amp;e)<br>  <span class="hljs-comment">//线性表存在，且1&lt;=i&lt;=ListLength(L)</span><br>  <span class="hljs-comment">//删除L的第i个数据元素，并用e返回其值，L的长度减1</span><br>ListTraverse(&amp;L,visited())<br>  <span class="hljs-comment">//线性表存在</span><br>  <span class="hljs-comment">//遍历函数，对线性表中每一个元素调用visited()</span><br></code></pre></td></tr></tbody></table></figure><h4 id="顺序表示和实现-随机存取法"><a href="#顺序表示和实现-随机存取法" class="headerlink" title="顺序表示和实现(随机存取法)"></a>顺序表示和实现(随机存取法)</h4><ul><li>典型的线性表顺序存储结构：依次存储，地址<strong>连续</strong>。则知道一个元素的存储位置就可以计算其他元素的存储位置。<em>如数组</em></li><li>若地址不连续，即中间存在空的存储单元，则不是一个线性表顺序存储结构。</li><li>优点：<ul><li>随机存取，即每一个元素的位置都能直接计算得到，且运算的时间复杂度为O(1)，与储存的元素个数无关。</li><li>存储密度大(节点本身所占存储量/节点结构所占存储量)</li></ul></li><li>缺点：<ul><li>无法随机存储，增删时都需要移动大量元素</li><li>静态存储，无法自由扩充元素个数，浪费存储空间</li></ul></li><li>线性表的数据类型：线性表的表长是可变的，但数组的长度是不可变的，因此需要用一个变量表示顺序表的长度属性，如下</li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">define LIST_INIT_SIZE <span class="hljs-number">100</span> <span class="hljs-comment">//线性表存储空间的初始分配量，即可能达到的最大长度</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> {</span><br>  ElemType elem[LIST_INIT_SIZE]; <span class="hljs-comment">//ElemType为元素类型</span><br>  <span class="hljs-type">int</span> length; <span class="hljs-comment">//当前长度</span><br>}SqList<br></code></pre></td></tr></tbody></table></figure><div class="admonition attention"><p class="admonition-title">attention</p><ul><li>逻辑位序与物理位序相差1，即数组第一个元素实际是存放在下标为0的位置</li><li><code>ElemType data[MaxSize]</code> 数组是静态分配的</li><li><code>ElemType *data</code> 数组是动态分配的，用malloc函数分配 <code>L.data = (ElemType*)malloc(sizeof(ElemType)*MaxSize) //(ElemType*)将返回值强制转换为括号内类型</code>data中存放的都是数组的首地址。</li></ul></div><h5 id="类C语言的补充"><a href="#类C语言的补充" class="headerlink" title="类C语言的补充"></a>类C语言的补充</h5><blockquote><ul><li>c语言中动态分配会用到的函数，包含在头文件&lt;stdlib.h&gt;中<ul><li>malloc(m)函数：开辟m字节长度的地址空间，并返回这段空间的首地址</li><li>sizeof(x)函数：返回变量x的长度</li><li>free(p)函数：释放指针p所指的存储空间，即彻底删除一个变量</li></ul></li><li>c++中动态分配会用到的函数<ul><li>new 类型名T(初值列表)：申请用于存放T类型对象的内存空间，并依初值列表赋以初值(初值列表可省略)。成果则返回新分配的内存地址，是一个T类型的指针；失败则返回NULL(0)。</li><li>delete 指针p：用于释放new分配的指针所指向的地址。</li></ul></li><li>函数的参数传递<ul><li>传值：形参(函数内的临时变量)操作不影响实参</li><li>传地址：形参操作可以影响实参<br>分为三种，指针、数组名和引用，三者其实都是一个指针。<ul><li>其中引用为<code>int &amp;j = i</code>，称j为i的引用，二者共用一个地址，可以将j看作一个常量指针，指向i所在地址。</li><li>但引用类型作形参，在内存中并没有产生实参的副本，而是直接对实参操作，因此对比值传递，引用传递的时间和空间效率更好。</li><li>对比指针传递，在被调用函数中需要反复使用解引用运算符*，容易出错且阅读性较差。</li></ul></li></ul></li></ul></blockquote><h5 id="常用预定义常量的补充"><a href="#常用预定义常量的补充" class="headerlink" title="常用预定义常量的补充"></a>常用预定义常量的补充</h5><blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">&gt;<span class="hljs-meta">#<span class="hljs-keyword">define</span> TRUE 1</span><br>&gt;<span class="hljs-meta">#<span class="hljs-keyword">define</span> FALSE 0</span><br>&gt;<span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br>&gt;<span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR 0</span><br>&gt;<span class="hljs-meta">#<span class="hljs-keyword">define</span> INFEASIBLE -1 <span class="hljs-comment">//不可行的</span></span><br>&gt;<span class="hljs-meta">#<span class="hljs-keyword">define</span> OVERFLOW -2</span><br><br>&gt;<span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> Status <span class="hljs-comment">//值是函数结果状态代码，不一定是int，与返回值有关</span><br>&gt;<span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> ELemType <span class="hljs-comment">//不一定是char，取决于数据域类型</span><br></code></pre></td></tr></tbody></table></figure></blockquote><h5 id="线性表-基本操作的代码实现"><a href="#线性表-基本操作的代码实现" class="headerlink" title="(线性表)基本操作的代码实现"></a>(线性表)基本操作的代码实现</h5><p>PS：<em>王卓老师这里讲了一些基本操作的代码实现，讲的很具体。因为已经学过C++我就直接忽略了，有需要的可以去看网课P17-220，这里只补充一些知识点</em></p><ul><li>**平均查找长度(ASL)<strong>：Locate函数的平均时间复杂度，即需要与给定值进行比较的次数的期望值。<code>ASL=Σ^n^~i=1~P~i~*C~i~</code>，其中P<del>i</del>为第i个元素被查找的概率，C<del>i</del>为找到第i个记录需比较的次数。</strong></li><li>插入元素时要保证数组连续，因此要从最后一个开始，一个接一个往后移。还要确保不会溢出。</li></ul><div class="admonition note"><p class="admonition-title">note</p><p>顺序表的ASL=(n+1)/2插入函数的平均时间复杂度为n/2删除函数的平均时间复杂度为(n-1)/2</p></div><h4 id="链式表示和实现-顺序存取法"><a href="#链式表示和实现-顺序存取法" class="headerlink" title="链式表示和实现(顺序存取法)"></a>链式表示和实现(顺序存取法)</h4><ul><li>结点在存储器中的位置是<strong>任意的</strong>，即逻辑上相邻的元素在物理上不一定相邻。</li><li>在存储元素的同时，存储其下一个元素的地址。最后一个元素的下一个元素为NULL。</li><li><strong>链表</strong>：n个结点由指针链组成一个链表。<br>每个结点由两部分组成，<strong>数据域</strong>和<strong>指针域</strong>。<ul><li><strong>单链表</strong>：每个结点只有一个指针域，用于存放后继元素的地址。</li><li><strong>双链表</strong>：每个结点有两个指针域，分别存放前趋和后继元素的地址。</li><li><strong>循环链表</strong>：首尾相接的链表，尾结点的后继元素为头结点。</li></ul></li><li><strong>头指针</strong>：指向链表中第一个结点的指针。</li><li><strong>首元结点</strong>：链表中存储第一个数据元素a<del>1</del>的结点。</li><li><strong>头结点</strong>：在首元结点之前附设的一个结点，并不统计在表长内。数据域为空或存放表长等信息，指针域指向首元结点。有以下优点：<ul><li>便于首元结点的处理。首元结点的地址也是保存在指针域中，则所有结点的操作都一样。</li><li>处理空表和非空表时操作一样。</li><li>优点：方便增删数据。</li><li>缺点：顺序存取，查找元素需要依次扫描。</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/zhongyebb/picture-gallery/main/blogs/pictures/20241003191125.png" alt="20241003191125" title="头指针、首元结点和头结点"></p><ul><li>链表的数据类型。以单链表为例</li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Lnode</span>{</span><br>  ElemType data; <span class="hljs-comment">//一般先将所有数据域封装为一个结构体ElemType</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Lnode</span> *<span class="hljs-title">next</span>;</span><br>}Lnode, *LinkList; <span class="hljs-comment">//LinkList为指向结构体Lnode的指针类型，即Lnode *p等价于LinkList p。</span><br></code></pre></td></tr></tbody></table></figure><h5 id="链表-基本操作的代码实现"><a href="#链表-基本操作的代码实现" class="headerlink" title="(链表)基本操作的代码实现"></a>(链表)基本操作的代码实现</h5><ul><li>链表的销毁要依次释放，包括头指针和头结点。</li><li>链表依然存在，即头指针和头结点保留，但链表中无元素。</li></ul><p>PS：<em>P24-34(除P32)，都在将代码实现，学过的可以直接拉到每节最后复习一下代码</em></p><div class="admonition note"><p class="admonition-title">note</p><p>链表的查找时间复杂度为O(n)插入和删除的时间复杂度为O(1)，但由于要从头开始查找结点，因此时间复杂度为O(n)</p></div><ul><li>**头插法(前插法)**：每次把新元素插入链表头部，即头结点指向的位置。</li><li>**尾插法(后插法)**：每次把新元素插入链表尾部。</li></ul><div class="admonition attention"><p class="admonition-title">attention</p><p>个人觉得王卓老师这里讲的不太清晰。它引入了一个尾结点的概念，但代码中的这个尾结点实际上是一个临时变量r，应与头结点的概念区别开来。这里叫末元/尾元结点之类的，与首元结点概念类似的名称比较好。直观点说，头结点不是数据元素，不存数据；尾结点是数据元素，存数据。</p></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/05/02/hello-world/"/>
    <url>/2024/05/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
